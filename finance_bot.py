import os
import sqlite3
import tempfile
import io
from datetime import datetime, date
import matplotlib.pyplot as plt
import logging

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -----------------
TOKEN = "7940613188:AAEyklD7Sa8uY0adjfnM5Hsgg_LfMEJ7Gb4"  # <--- –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω
DB_FILE = "finance.db"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ----------------- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö -----------------
conn = sqlite3.connect(DB_FILE, check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS finance (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,        -- 'income' –∏–ª–∏ 'expense'
    amount REAL,
    category TEXT,
    date TEXT         -- YYYY-MM-DD
)
""")
conn.commit()

# ----------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard) -----------------
main_menu = [
    ["‚ûï –î–æ—Ö–æ–¥", "‚ûñ –†–∞—Å—Ö–æ–¥"],
    ["üí∞ –ë–∞–ª–∞–Ω—Å", "üìä –û—Ç—á–µ—Ç"],
    ["üìí –ò—Å—Ç–æ—Ä–∏—è"]
]
reply_markup = ReplyKeyboardMarkup(main_menu, resize_keyboard=True)

# ----------------- –ü–æ–º–æ—â–Ω–∏–∫–∏ -----------------
def parse_amount_and_category(text: str):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏:
      "1000 –µ–¥–∞", "+1000 –µ–¥–∞", "-500 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "1000"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (sign, amount(float), category_str)
    sign: 1 for positive, -1 for negative, 0 if not provided
    """
    text = text.strip()
    if not text:
        raise ValueError("–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞")

    # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å + –∏–ª–∏ -, —É—á–∏—Ç—ã–≤–∞–µ–º
    sign = 0
    if text[0] == "+":
        sign = 1
        text = text[1:].strip()
    elif text[0] == "-":
        sign = -1
        text = text[1:].strip()

    parts = text.split(maxsplit=1)
    amount_str = parts[0].replace(",", ".")
    amount = float(amount_str)  # –≤—ã–∑–æ–≤–µ—Ç ValueError –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ
    category = parts[1].strip() if len(parts) > 1 else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    return sign, amount, category

def insert_record(user_id: int, rec_type: str, amount: float, category: str, rec_date: str = None):
    if rec_date is None:
        rec_date = date.today().isoformat()
    cur.execute(
        "INSERT INTO finance (user_id, type, amount, category, date) VALUES (?, ?, ?, ?, ?)",
        (user_id, rec_type, amount, category, rec_date)
    )
    conn.commit()
    logger.info("Inserted record: user=%s type=%s amount=%s category=%s date=%s", user_id, rec_type, amount, category, rec_date)

def get_balance(user_id: int):
    cur.execute("SELECT SUM(amount) FROM finance WHERE user_id=? AND type='income'", (user_id,))
    inc = cur.fetchone()[0] or 0
    cur.execute("SELECT SUM(amount) FROM finance WHERE user_id=? AND type='expense'", (user_id,))
    exp = cur.fetchone()[0] or 0
    return inc - exp, inc, exp

# ----------------- –ì—Ä–∞—Ñ–∏–∫–∏ -----------------
def build_daily_series(user_id: int, kind: str, month_mask: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—ã (dates_sorted, values) –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞_mask 'YYYY-MM'
    """
    cur.execute(
        "SELECT date, SUM(amount) FROM finance WHERE user_id=? AND type=? AND date LIKE ? GROUP BY date ORDER BY date",
        (user_id, kind, month_mask + "%"),
    )
    rows = cur.fetchall()  # —Å–ø–∏—Å–æ–∫ (date, sum)
    dates = [r[0] for r in rows]
    values = [r[1] for r in rows]
    return dates, values

def plot_to_file(dates, values, title):
    plt.figure(figsize=(8, 4))
    plt.plot(dates, values, marker="o")
    plt.title(title)
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–°—É–º–º–∞")
    plt.xticks(rotation=40)
    plt.tight_layout()
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
    plt.savefig(tmp.name)
    plt.close()
    return tmp.name

# ----------------- –•–µ–Ω–¥–ª–µ—Ä—ã -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏ –Ω–∞–ø—Ä—è–º—É—é:\n"
        "  +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞  (–∏–ª–∏) 1000 –∑–∞—Ä–ø–ª–∞—Ç–∞\n"
        "  -500 –µ–¥–∞",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Ç–µ–∫—Å—Ç)
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    user_id = update.message.from_user.id

    if txt == "‚ûï –î–æ—Ö–æ–¥":
        context.user_data['pending'] = 'income'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ—Ö–æ–¥–∞ (–ø—Ä–∏–º–µ—Ä: 1000 –∑–∞—Ä–ø–ª–∞—Ç–∞)")

    elif txt == "‚ûñ –†–∞—Å—Ö–æ–¥":
        context.user_data['pending'] = 'expense'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ (–ø—Ä–∏–º–µ—Ä: 500 –µ–¥–∞)")

    elif txt == "üí∞ –ë–∞–ª–∞–Ω—Å":
        bal, inc, exp = get_balance(user_id)
        await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {bal}\n‚ûï –î–æ—Ö–æ–¥—ã: {inc}\n‚ûñ –†–∞—Å—Ö–æ–¥—ã: {exp}", reply_markup=reply_markup)

    elif txt == "üìí –ò—Å—Ç–æ—Ä–∏—è":
        # –ø–æ—Å—Ç—Ä–æ–∏–º –∏—Å—Ç–æ—Ä–∏—é –∏ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
        cur.execute("SELECT id, type, amount, category, date FROM finance WHERE user_id=? ORDER BY date DESC, id DESC", (user_id,))
        rows = cur.fetchall()
        if not rows:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=reply_markup)
            return
        text_lines = []
        buttons = []
        for r in rows:
            rid, rtype, amount, category, rdate = r
            sign = "+" if rtype == "income" else "-"
            text_lines.append(f"{rid}. {rdate} {sign}{amount} ({category})")
            buttons.append([InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å {rid}", callback_data=f"del_{rid}"),
                            InlineKeyboardButton(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {rid}", callback_data=f"edit_{rid}")])
        await update.message.reply_text("\n".join(text_lines), reply_markup=InlineKeyboardMarkup(buttons))

    elif txt == "üìä –û—Ç—á–µ—Ç":
        month_mask = date.today().strftime("%Y-%m")
        # —Ä–∞—Å—Ö–æ–¥—ã
        d_exp, v_exp = build_daily_series(user_id, 'expense', month_mask)
        # –¥–æ—Ö–æ–¥—ã
        d_inc, v_inc = build_daily_series(user_id, 'income', month_mask)

        await update.message.reply_text(f"üìä –û—Ç—á–µ—Ç –∑–∞ {month_mask}:")
        # –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ–±—â–∞–µ–º
        if not d_exp and not d_inc:
            await update.message.reply_text("–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.", reply_markup=reply_markup)
            return
        # –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if d_exp:
            fname = plot_to_file(d_exp, v_exp, f"–†–∞—Å—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º ({month_mask})")
            with open(fname, "rb") as f:
                await update.message.reply_photo(photo=f)
            try: os.remove(fname)
            except: pass
        else:
            await update.message.reply_text("–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.")

        # –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤
        if d_inc:
            fname2 = plot_to_file(d_inc, v_inc, f"–î–æ—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º ({month_mask})")
            with open(fname2, "rb") as f:
                await update.message.reply_photo(photo=f)
            try: os.remove(fname2)
            except: pass

        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ.", reply_markup=reply_markup)

    else:
        # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑ –º–µ–Ω—é ‚Äî –ø–æ–ø–∞–¥—ë—Ç –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∏–∂–µ (–Ω–æ —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π;
        # —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –º–µ–Ω—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
        await update.message.reply_text("–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏ +1000 –∑–∞—Ä–ø–ª–∞—Ç–∞.", reply_markup=reply_markup)

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
# 1) –µ—Å–ª–∏ –µ—Å—Ç—å pending (–æ–∂–∏–¥–∞–Ω–∏–µ —Å—É–º–º—ã) ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
# 2) –µ—Å–ª–∏ –µ—Å—Ç—å editing (–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—É–º–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
# 3) –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø—Ä—è–º–æ–π –≤–≤–æ–¥ '+1000 –µ–¥–∞' –∏–ª–∏ '-500 –µ–¥–∞'
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    user_id = update.message.from_user.id

    # –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
    if 'editing' in context.user_data:
        rid = context.user_data.pop('editing')
        try:
            _, amount, category = parse_amount_and_category(txt)
            # –ø–æ–ª—É—á–∏–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ (income/expense) —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∏–ø
            cur.execute("SELECT user_id FROM finance WHERE id=?", (rid,))
            row = cur.fetchone()
            if not row:
                await update.message.reply_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            cur.execute("UPDATE finance SET amount=?, category=? WHERE id=?", (amount, category, rid))
            conn.commit()
            await update.message.reply_text(f"–ó–∞–ø–∏—Å—å #{rid} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {amount} ({category})", reply_markup=reply_markup)
        except Exception as e:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –§–æ—Ä–º–∞—Ç: 1000 –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        return

    # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É "‚ûï –î–æ—Ö–æ–¥" –∏–ª–∏ "‚ûñ –†–∞—Å—Ö–æ–¥"
    if 'pending' in context.user_data:
        action = context.user_data.pop('pending')  # 'income' –∏–ª–∏ 'expense'
        try:
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ "+1000 –µ–¥–∞" –∏–ª–∏ "1000 –µ–¥–∞"
            sign, amount, category = parse_amount_and_category(txt)
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–æ –∑–Ω–∞–∫–æ–º –∏ –æ–Ω –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç pending, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–Ω–∞–∫ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º pending
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º amount –∫–∞–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
            insert_record(user_id, action, amount, category)
            await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {('+' if action=='income' else '-')}{amount} ({category})", reply_markup=reply_markup)
        except Exception as e:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: 1000 –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–ø—Ä–∏–º–µ—Ä: 1000 –∑–∞—Ä–ø–ª–∞—Ç–∞)")
        return

    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø—Ä—è–º–æ–π –≤–≤–æ–¥ —Ç–∏–ø–∞ "+1000 –µ–¥–∞" –∏–ª–∏ "-500 –µ–¥–∞"
    try:
        sign, amount, category = parse_amount_and_category(txt)
        if sign == 1:
            insert_record(user_id, 'income', amount, category)
            await update.message.reply_text(f"‚úÖ –î–æ—Ö–æ–¥ +{amount} ({category}) –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=reply_markup)
            return
        elif sign == -1:
            insert_record(user_id, 'expense', amount, category)
            await update.message.reply_text(f"‚úÖ –†–∞—Å—Ö–æ–¥ -{amount} ({category}) –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=reply_markup)
            return
    except Exception:
        pass

    # –∏–Ω–∞—á–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –≤–≤–æ–¥
    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏ '+1000 –∑–∞—Ä–ø–ª–∞—Ç–∞' / '-500 –µ–¥–∞'.")

# CallbackQuery: —É–¥–∞–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data.startswith("del_"):
        rid = int(data.split("_", 1)[1])
        # –ø—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–∞–≤–æ —É–¥–∞–ª–µ–Ω–∏—è (–≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞–ø–∏—Å–∏)
        cur.execute("SELECT user_id FROM finance WHERE id=?", (rid,))
        row = cur.fetchone()
        if not row:
            await query.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        owner_id = row[0]
        if owner_id != user_id:
            await query.edit_message_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —á—É–∂–∏–µ –∑–∞–ø–∏—Å–∏.")
            return
        cur.execute("DELETE FROM finance WHERE id=?", (rid,))
        conn.commit()
        await query.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å—å #{rid} —É–¥–∞–ª–µ–Ω–∞.")

    elif data.startswith("edit_"):
        rid = int(data.split("_", 1)[1])
        cur.execute("SELECT user_id, type, amount, category FROM finance WHERE id=?", (rid,))
        row = cur.fetchone()
        if not row:
            await query.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        owner_id = row[0]
        if owner_id != user_id:
            await query.edit_message_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∑–∞–ø–∏—Å–∏.")
            return
        # –ø–æ–º–µ—Ç–∏–º, —á—Ç–æ –∂–¥–µ–º –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
        context.user_data['editing'] = rid
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏ #{rid} (–ø—Ä–∏–º–µ—Ä: 500 —Ç–∞–∫—Å–∏)")

# ----------------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ -----------------
def main():
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
    app.add_handler(CommandHandler("start", start))

    # –ú–µ–Ω—é ‚Äî –ª–æ–≤–∏–º —Ç–æ—á–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    app.add_handler(MessageHandler(filters.Regex('^(‚ûï –î–æ—Ö–æ–¥|‚ûñ –†–∞—Å—Ö–æ–¥|üí∞ –ë–∞–ª–∞–Ω—Å|üìä –û—Ç—á–µ—Ç|üìí –ò—Å—Ç–æ—Ä–∏—è)$') & filters.USER, menu_handler))

    # Callback –∫–Ω–æ–ø–∫–∏ (—É–¥–∞–ª–∏—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
    app.add_handler(CallbackQueryHandler(callback_handler))

    # –û–±—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()

if __name__ == "__main__":
    main()

